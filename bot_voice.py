# bot_voice.py ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫
# --------------------------------------------------------------
# –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Yandex SpeechKit (SpeechSense)
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: API Key + Folder ID –∏–∑ Render Environment

import os
import logging
import tempfile
import requests
from telegram import Update
from telegram.ext import MessageHandler, filters, ContextTypes

# --- ENV ---
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

URL_STT = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
URL_TTS = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"

HEADERS = {"Authorization": f"Api-Key {YANDEX_API_KEY}"}

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")


def route_intent(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –ª–æ–≥–∏–∫–∞)."""
    t = (text or "").lower()
    if "—Ü–µ–Ω–∞" in t or "—Å—Ç–æ–∏—Ç" in t:
        return "–¶–µ–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑—ã –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é. –ö–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    if "–∑–∞–ø–∏—Å" in t:
        return "–ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø–∏—Å—å. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è."
    if "–≥—Ä–∞—Ñ–∏–∫" in t or "—Ä–µ–∂–∏–º" in t or "—á–∞—Å—ã" in t:
        return "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. –£—Ç–æ—á–Ω–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É –∏ –¥–∞—Ç—É, —á—Ç–æ–±—ã —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–µ–µ."
    return "–Ø –ø–æ–º–æ–≥—É —Å —É—Å–ª—É–≥–∞–º–∏, —Ü–µ–Ω–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å—é. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."


async def stt_yandex_ogg(ogg_bytes: bytes) -> str:
    params = {
        "folderId": YANDEX_FOLDER_ID,
        "lang": "ru-RU",
        "format": "oggopus",
        "profanityFilter": "false",
    }
    r = requests.post(URL_STT, headers=HEADERS, params=params, data=ogg_bytes, timeout=60)
    r.raise_for_status()
    for line in r.text.splitlines():
        if line.startswith("result="):
            return line.split("=", 1)[1].strip()
    return ""


async def tts_yandex_ogg(text: str) -> bytes:
    data = {
        "text": text,
        "lang": "ru-RU",
        "voice": "ermil",
        "emotion": "neutral",
        "speed": "1.0",
        "format": "oggopus",
        "folderId": YANDEX_FOLDER_ID,
    }
    with requests.post(URL_TTS, headers=HEADERS, data=data, stream=True, timeout=60) as r:
        r.raise_for_status()
        return b"".join(r.iter_content(4096))


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file = await context.bot.get_file(update.message.voice.file_id)
        ogg_bytes = await file.download_as_bytearray()
        logging.info("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ: %s –±–∞–π—Ç", len(ogg_bytes))

        user_text = await stt_yandex_ogg(ogg_bytes)
        if not user_text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè")
            return

        reply_text = route_intent(user_text)
        tts_bytes = await tts_yandex_ogg(reply_text)

        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tmp:
            tmp.write(tts_bytes)
            tmp.flush()
            await update.message.reply_voice(voice=open(tmp.name, "rb"), caption=f"–í—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{user_text}¬ª\n\n{reply_text}")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: %s", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")


def register_voice_handler(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram."""
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
# –í –æ—Å–Ω–æ–≤–Ω–æ–º bot.py (–ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä) –¥–æ–±–∞–≤–∏—Ç—å:
# from bot_voice import register_voice_handler
# ...
# app = build_app()
# register_voice_handler(app)
# app.run_polling()

# –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –Ω–∞—á–Ω–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ä–µ—á—å —á–µ—Ä–µ–∑ Yandex SpeechKit
# –∏ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º.
