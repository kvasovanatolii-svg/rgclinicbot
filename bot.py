# -*- coding: utf-8 -*-
"""
bot.py ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫
–ú–∏–Ω–∏-–≤–µ—Ä—Å–∏—è: —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∏ + –≥–æ–ª–æ—Å (—á–µ—Ä–µ–∑ Yandex SpeechKit)
–ü—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–∞ –ø–æ–¥ Render –∏ python-telegram-bot 20.x
"""

import os
import json
import logging
import tempfile

import requests
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ------------------------------------------------------------
# –õ–û–ì–ò
# ------------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)
log = logging.getLogger("rgclinicbot")


# ------------------------------------------------------------
# –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
# ------------------------------------------------------------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

URL_STT = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
URL_TTS = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"

if not BOT_TOKEN:
    raise SystemExit("‚ùó TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")


# ------------------------------------------------------------
# UI
# ------------------------------------------------------------
WELCOME = (
    "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫.\n"
    "–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–Ω–∞–ª–∏–∑–∞–º, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –∑–∞–ø–∏—Å–∏.\n"
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å ‚Äî —è —Ä–∞–∑–±–µ—Ä—É üòä"
)


def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º", callback_data="RECORD")],
            [InlineKeyboardButton("üßæ –¶–µ–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑—ã", callback_data="PRICES")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", callback_data="PREP")],
            [InlineKeyboardButton("üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="CONTACTS")],
        ]
    )


# ------------------------------------------------------------
# SpeechKit: STT
# ------------------------------------------------------------
async def stt_yandex_ogg(ogg_bytes: bytes) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å –≤ Yandex STT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)."""
    if not (YANDEX_API_KEY and YANDEX_FOLDER_ID):
        log.warning("SpeechKit: –Ω–µ –∑–∞–¥–∞–Ω—ã YANDEX_API_KEY –∏–ª–∏ YANDEX_FOLDER_ID")
        return ""

    headers = {"Authorization": f"Api-Key {YANDEX_API_KEY}"}
    params = {
        "folderId": YANDEX_FOLDER_ID,
        "lang": "ru-RU",
        "format": "oggopus",
    }

    try:
        r = requests.post(
            URL_STT,
            headers=headers,
            params=params,
            data=ogg_bytes,
            timeout=60,
        )
        log.info("STT status=%s, text=%r", r.status_code, r.text)
        r.raise_for_status()

        # –æ—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤–∏–¥–∞:
        # result=...
        # session_id=...
        for line in r.text.splitlines():
            if line.startswith("result="):
                return line.split("=", 1)[1].strip()
        return ""
    except Exception as e:
        log.exception("STT error: %s", e)
        return ""


# ------------------------------------------------------------
# SpeechKit: TTS
# ------------------------------------------------------------
async def tts_yandex_ogg(text: str) -> bytes:
    if not (YANDEX_API_KEY and YANDEX_FOLDER_ID):
        return b""

    headers = {"Authorization": f"Api-Key {YANDEX_API_KEY}"}
    data = {
        "text": text,
        "lang": "ru-RU",
        "voice": "ermil",
        "emotion": "neutral",
        "speed": "1.0",
        "format": "oggopus",
        "folderId": YANDEX_FOLDER_ID,
    }

    try:
        with requests.post(
            URL_TTS,
            headers=headers,
            data=data,
            stream=True,
            timeout=60,
        ) as r:
            log.info("TTS status=%s", r.status_code)
            r.raise_for_status()
            return b"".join(r.iter_content(4096))
    except Exception as e:
        log.exception("TTS error: %s", e)
        return b""


# ------------------------------------------------------------
# –†–û–£–¢–ï–† –î–õ–Ø –¢–ï–ö–°–¢–ê
# ------------------------------------------------------------
def route_intent(text: str) -> str:
    t = (text or "").lower()

    if "—Ü–µ–Ω–∞" in t or "—Å—Ç–æ–∏—Ç" in t or "–∞–Ω–∞–ª–∏–∑" in t or "–ø—Ä–∞–π—Å" in t:
        return "üßæ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Å–ø—Ä–∞–≤–æ—á–Ω–æ)."
    if "–∑–∞–ø–∏—Å" in t:
        return "üìÖ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–∞—á–∞/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    if "–≥—Ä–∞—Ñ–∏–∫" in t or "—Ä–µ–∂–∏–º" in t or "—á–∞—Å—ã" in t:
        return "üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (—Å–ø—Ä–∞–≤–æ—á–Ω–æ): –ø–Ω‚Äì–ø—Ç 09:00‚Äì20:00, —Å–± 09:00‚Äì17:00, –≤—Å 09:00‚Äì15:00. –£—Ç–æ—á–Ω–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ."
    if "–ø–æ–¥–≥–æ—Ç–æ–≤" in t or "–Ω–∞—Ç–æ—â–∞–∫" in t:
        return "‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø—Ä–∏—à–ª—é –æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ (—Å–ø—Ä–∞–≤–æ—á–Ω–æ)."

    return "–Ø –ø–æ–º–æ–≥—É —Å —É—Å–ª—É–≥–∞–º–∏, —Ü–µ–Ω–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å—é. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º."


# ------------------------------------------------------------
# HANDLERS
# ------------------------------------------------------------
async def log_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∞–ø–¥–µ–π—Ç, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–∏—à–ª–æ –≤ –±–æ—Ç–∞."""
    try:
        as_json = update.to_dict()
        log.info("UPDATE: %s", json.dumps(as_json, ensure_ascii=False)[:2000])
    except Exception:
        pass


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log.info(">>> /start –æ—Ç %s", update.effective_user.id)
    await update.message.reply_text(WELCOME, reply_markup=main_menu())


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    log.info(">>> callback: %s", q.data)

    if q.data == "PRICES":
        await q.message.reply_text("üßæ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É—é –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å (—Å–ø—Ä–∞–≤–æ—á–Ω–æ).")
    elif q.data == "RECORD":
        await q.message.reply_text("üìÖ –ù–∞–ø–∏—à–∏—Ç–µ, –∫ –∫–∞–∫–æ–º—É –≤—Ä–∞—á—É/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏ –¥–∞—Ç—É.")
    elif q.data == "PREP":
        await q.message.reply_text("‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø—Ä–∏—à–ª—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É (—Å–ø—Ä–∞–≤–æ—á–Ω–æ).")
    elif q.data == "CONTACTS":
        await q.message.reply_text("üìç –†–ì –ö–ª–∏–Ω–∏–∫. –£—Ç–æ—á–Ω–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª ‚Äî –¥–∞–º –∞–¥—Ä–µ—Å –∏ —Ä–µ–∂–∏–º.")
    else:
        await q.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=main_menu())


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_text = (update.message.text or "").strip()
        log.info(">>> —Ç–µ–∫—Å—Ç –æ—Ç %s: %s", update.effective_user.id, user_text)
        reply = route_intent(user_text)
        await update.message.reply_text(reply, reply_markup=main_menu())
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –≤ handle_text: %s", e)
        await update.message.reply_text("–¢–µ—Ö. –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.")


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏—à–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–∑ Telegram ‚Üí —Å–∫–∞—á–∏–≤–∞–µ–º ‚Üí —à–ª—ë–º –≤ Yandex ‚Üí –æ—Ç–≤–µ—á–∞–µ–º."""
    try:
        voice = update.message.voice
        log.info(">>> –≥–æ–ª–æ—Å –æ—Ç %s: duration=%s sec", update.effective_user.id, voice.duration)

        # 1. —Å–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–∑ Telegram
        tg_file = await context.bot.get_file(voice.file_id)
        ogg_bytes = await tg_file.download_as_bytearray()
        log.info("–°–∫–∞—á–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ: %s –±–∞–π—Ç", len(ogg_bytes))

        # 2. –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ STT
        text_from_voice = await stt_yandex_ogg(bytes(ogg_bytes))
        if not text_from_voice:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ üôè")
            return

        log.info("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–∑ –≥–æ–ª–æ—Å–∞: %s", text_from_voice)

        # 3. –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç-–æ—Ç–≤–µ—Ç
        reply_text = route_intent(text_from_voice)

        # 4. –ø—Ä–æ–±—É–µ–º –æ–∑–≤—É—á–∏—Ç—å
        tts_bytes = await tts_yandex_ogg(reply_text)
        if not tts_bytes:
            # –µ—Å–ª–∏ –æ–∑–≤—É—á–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º
            msg = "–í—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{}¬ª\n\n{}".format(text_from_voice, reply_text)
            await update.message.reply_text(msg)
            return

        # 5. –µ—Å–ª–∏ –æ–∑–≤—É—á–∫–∞ –µ—Å—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º voice
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tmp:
            tmp.write(tts_bytes)
            tmp.flush()
            caption_out = "–í—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{}¬ª\n\n{}".format(text_from_voice, reply_text)
            await update.message.reply_voice(voice=open(tmp.name, "rb"), caption=caption_out)

    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: %s", e)
        await update.message.reply_text("–¢–µ—Ö. –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.")


# ------------------------------------------------------------
# STARTUP: —Å–Ω–∏–º–∞–µ–º webhook
# ------------------------------------------------------------
async def on_startup(app):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        log.info("Webhook —Å–Ω—è—Ç, –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å webhook: %s", e)


# ------------------------------------------------------------
# MAIN
# ------------------------------------------------------------
def main():
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .post_init(on_startup)
        .build()
    )

    # 0. –ª–æ–≥ –≤—Å–µ—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    app.add_handler(MessageHandler(filters.ALL, log_all), group=0)

    # 1. –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))

    # 2. –∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(handle_callback))

    # 3. –≥–æ–ª–æ—Å
    app.add_handler(MessageHandler(filters.VOICE, handle_voice), group=5)

    # 4. —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text), group=10)

    log.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (polling)‚Ä¶")
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
