# bot.py ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫ (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º)
# --------------------------------------------------------------
# ‚úî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (STT + TTS —á–µ—Ä–µ–∑ Yandex SpeechKit)
# ‚úî –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (Google Sheets, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∑–∞–ø–∏—Å—å, —Ü–µ–Ω—ã –∏ —Ç.–¥.)
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: python-telegram-bot>=20.8, gspread, google-auth, requests

import os
import re
import json
import time
import logging
import tempfile
import requests
from datetime import datetime
from dateutil.parser import parse as dt_parse

import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import Conflict
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

# --------- ENV ----------
BOT_TOKEN       = os.getenv("TELEGRAM_BOT_TOKEN")
SPREADSHEET_ID  = os.getenv("GOOGLE_SPREADSHEET_ID")
SERVICE_JSON    = os.getenv("GOOGLE_SERVICE_ACCOUNT")
ADMIN_CHAT_ID   = os.getenv("ADMIN_CHAT_ID")

YANDEX_API_KEY  = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

URL_STT = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
URL_TTS = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
HEADERS = {"Authorization": f"Api-Key {YANDEX_API_KEY}"} if YANDEX_API_KEY else {}

SCHEDULE_SHEET  = "Schedule"
REQUESTS_SHEET  = "Requests"
PRICES_SHEET    = "Prices"
PREP_SHEET      = "Prep"
INFO_SHEET      = "Info"
DOCTORS_SHEET   = "Doctors"

logging.basicConfig(format="%(asctime)s [%(levelname)s] %(message)s", level=logging.INFO)

# --------- UI ----------
WELCOME = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"
HELP    = ("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n"
           "/menu ‚Äî –º–µ–Ω—é\n"
           "/init_sheets ‚Äî —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç—ã –∏ —à–∞–ø–∫–∏\n"
           "/fix_headers ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–ø–∫–∏\n"
           "/debug_slots ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–∏–º—ã–µ —Å–ª–æ—Ç—ã\n"
           "/doctor <—Ñ–∞–º–∏–ª–∏—è|—Å–ø–µ—Ü> ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—Ä–∞—á–∞\n"
           "/hours /manager /promos /services /contacts\n")

BTN_RECORD   = "üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º"
BTN_PRICES   = "üßæ –¶–µ–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑—ã"
BTN_PREP     = "‚ÑπÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
BTN_CONTACTS = "üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã"

# ================================================================
# === –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (SpeechKit)
# ================================================================

async def stt_yandex_ogg(ogg_bytes: bytes) -> str:
    params = {
        "folderId": YANDEX_FOLDER_ID,
        "lang": "ru-RU",
        "format": "oggopus",
        "profanityFilter": "false",
    }
    try:
        r = requests.post(URL_STT, headers=HEADERS, params=params, data=ogg_bytes, timeout=60)
        r.raise_for_status()
        for line in r.text.splitlines():
            if line.startswith("result="):
                return line.split("=", 1)[1].strip()
        return ""
    except Exception as e:
        logging.error(f"STT error: {e}")
        return ""

async def tts_yandex_ogg(text: str) -> bytes:
    data = {
        "text": text,
        "lang": "ru-RU",
        "voice": "ermil",
        "emotion": "neutral",
        "speed": "1.0",
        "format": "oggopus",
        "folderId": YANDEX_FOLDER_ID,
    }
    try:
        with requests.post(URL_TTS, headers=HEADERS, data=data, stream=True, timeout=60) as r:
            r.raise_for_status()
            return b"".join(r.iter_content(4096))
    except Exception as e:
        logging.error(f"TTS error: {e}")
        return b""

def route_intent(text: str) -> str:
    t = (text or "").lower()
    if "—Ü–µ–Ω–∞" in t or "—Å—Ç–æ–∏—Ç" in t:
        return "–¶–µ–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑—ã –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–æ–¥—É. –ö–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    if "–∑–∞–ø–∏—Å" in t:
        return "–ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø–∏—Å—å. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è."
    if "–≥—Ä–∞—Ñ–∏–∫" in t or "—Ä–µ–∂–∏–º" in t or "—á–∞—Å—ã" in t:
        return "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. –£—Ç–æ—á–Ω–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É –∏ –¥–∞—Ç—É, —á—Ç–æ–±—ã —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–µ–µ."
    return "–Ø –ø–æ–º–æ–≥—É —Å —É—Å–ª—É–≥–∞–º–∏, —Ü–µ–Ω–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å—é. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º."

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file = await context.bot.get_file(update.message.voice.file_id)
        ogg_bytes = await file.download_as_bytearray()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ: {len(ogg_bytes)} –±–∞–π—Ç")

        user_text = await stt_yandex_ogg(ogg_bytes)
        if not user_text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè")
            return

        reply_text = route_intent(user_text)
        tts_bytes = await tts_yandex_ogg(reply_text)

        if not tts_bytes:
            await update.message.reply_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{user_text}¬ª\n\n{reply_text}")
            return

        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tmp:
            tmp.write(tts_bytes)
            tmp.flush()
            await update.message.reply_voice(voice=open(tmp.name, "rb"), caption=f"–í—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{user_text}¬ª\n\n{reply_text}")

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# ================================================================
# === –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (Google Sheets, –∫–æ–º–∞–Ω–¥—ã, –º–µ–Ω—é –∏ —Ç.–ø.)
# ================================================================

# --- (—Å—é–¥–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ bot.py: Google Sheets, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∫–æ–º–∞–Ω–¥—ã –∏ —Ç.–¥.) ---
# –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤–µ—Å—å –∫–æ–¥, –æ–Ω –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
# –ì–ª–∞–≤–Ω–æ–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

# ================================================================
# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
# ================================================================

def build_app():
    from telegram.ext import ApplicationBuilder
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ bot.py (–∫–æ–º–∞–Ω–¥—ã, FSM, –º–µ–Ω—é –∏ —Ç.–¥.)

    return app

def main():
    if not BOT_TOKEN:
        raise SystemExit("‚ùó TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (polling)‚Ä¶")
    app = build_app()
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
