# bot.py ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫ (inline-–º–µ–Ω—é)
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: python-telegram-bot==20.8, gspread, google-auth, python-dateutil

import os
import json
import logging
from datetime import datetime
from dateutil.parser import parse as dt_parse, ParserError

import gspread
from google.oauth2.service_account import Credentials

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, Application, CommandHandler,
    CallbackQueryHandler, MessageHandler, ContextTypes, filters
)

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====
BOT_TOKEN       = os.getenv("TELEGRAM_BOT_TOKEN")
SPREADSHEET_ID  = os.getenv("GOOGLE_SPREADSHEET_ID")              # 12MrsPstgArUxiSCErzJD3zyw6npXv_LcSJ7HLlIXbw4
SHEET_NAME      = os.getenv("GOOGLE_SHEET_NAME", "Requests")      # –∏–º—è –ª–∏—Å—Ç–∞
SA_JSON         = os.getenv("GOOGLE_SERVICE_ACCOUNT")             # –≤–µ—Å—å JSON —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π)

logging.basicConfig(
    format="%(asctime)s %(levelname)s %(message)s",
    level=logging.INFO,
)

# ==== –¢–µ–∫—Å—Ç—ã ====
WELCOME_TEXT = (
    "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
    "–Ø ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫, –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"
)
HELP_TEXT = (
    "‚ÑπÔ∏è –Ø –ø–æ–º–æ–≥—É:\n"
    "‚Ä¢ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤\n"
    "‚Ä¢ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É\n"
    "‚Ä¢ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º\n"
    "‚Ä¢ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–Ω–∏–∫\n\n"
    "–ù–∞–∂–º–∏—Ç–µ /menu –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É."
)

# ==== –ö–Ω–æ–ø–∫–∏ ====
BTN_PRICES   = "üßæ –¶–µ–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑—ã"
BTN_RECORD   = "üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º"
BTN_CONTACTS = "üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã"
BTN_PREP     = "‚ÑπÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"

CB_PRICES   = "MENU_PRICES"
CB_RECORD   = "MENU_RECORD"
CB_CONTACTS = "MENU_CONTACTS"
CB_PREP     = "MENU_PREP"

def main_menu_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(BTN_PRICES, callback_data=CB_PRICES)],
        [InlineKeyboardButton(BTN_RECORD, callback_data=CB_RECORD)],
        [InlineKeyboardButton(BTN_PREP,   callback_data=CB_PREP)],
        [InlineKeyboardButton(BTN_CONTACTS, callback_data=CB_CONTACTS)],
    ]
    return InlineKeyboardMarkup(rows)

# ==== Google Sheets helpers ====
def _gs_client():
    if not SA_JSON:
        raise RuntimeError("GOOGLE_SERVICE_ACCOUNT –Ω–µ –∑–∞–¥–∞–Ω")
    info = json.loads(SA_JSON)
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = Credentials.from_service_account_info(info, scopes=scopes)
    return gspread.authorize(creds)

def append_booking_row(values: list):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü –ª–∏—Å—Ç–∞."""
    if not SPREADSHEET_ID:
        raise RuntimeError("GOOGLE_SPREADSHEET_ID –Ω–µ –∑–∞–¥–∞–Ω")
    gc = _gs_client()
    sh = gc.open_by_key(SPREADSHEET_ID)
    try:
        ws = sh.worksheet(SHEET_NAME)
    except Exception:
        ws = sh.sheet1
    ws.append_row(values, value_input_option="USER_ENTERED")

# ==== –ö–æ–º–∞–Ω–¥—ã ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_TEXT, reply_markup=main_menu_kb())

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é ====
async def on_menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    if data == CB_PRICES:
        text = (
            "üßæ *–¶–µ–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑—ã*\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ *–∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞* ‚Äî –ø–æ–¥—Å–∫–∞–∂—É —Ü–µ–Ω—É –∏ —Å—Ä–æ–∫–∏.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: `–ì–ª—é–∫–æ–∑–∞`, `–û–ê–ö`, `11-10-001`"
        )
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=main_menu_kb())

    elif data == CB_RECORD:
        text = (
            "üìÖ *–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º*\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
            "*–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –≤—Ä–∞—á/—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î), –≤—Ä–µ–º—è (–ß–ß:–ú–ú)*\n"
            "_–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò., +7..., –¢–µ—Ä–∞–ø–µ–≤—Ç, 2025-10-25, 14:30_"
        )
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=main_menu_kb())

    elif data == CB_PREP:
        text = "‚ÑπÔ∏è *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º*\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø—Ä–∏—à–ª—é –ø–∞–º—è—Ç–∫—É."
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=main_menu_kb())

    elif data == CB_CONTACTS:
        text = (
            "üìç *–ö–æ–Ω—Ç–∞–∫—Ç—ã –†–ì –ö–ª–∏–Ω–∏–∫*\n"
            "–ê–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1\n"
            "–¢–µ–ª.: +7 (000) 000-00-00\n"
            "–†–µ–∂–∏–º: –ø–Ω‚Äì–ø—Ç 08:00‚Äì20:00, —Å–±‚Äì–≤—Å 09:00‚Äì18:00"
        )
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=main_menu_kb())

# ==== –ü–∞—Ä—Å–µ—Ä –∑–∞–ø–∏—Å–∏ ====
def parse_booking(text: str):
    # –æ–∂–∏–¥–∞–µ–º: –§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –≤—Ä–∞—á, –¥–∞—Ç–∞, –≤—Ä–µ–º—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    parts = [p.strip() for p in text.split(",")]
    if len(parts) < 5:
        return None, "–ù—É–∂–Ω–æ 5 –ø–æ–ª–µ–π: –§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –≤—Ä–∞—á, –¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î), –≤—Ä–µ–º—è (–ß–ß:–ú–ú)."
    fio, phone, doctor, date_s, time_s = parts[:5]
    try:
        dt = dt_parse(f"{date_s} {time_s}")
    except ParserError:
        return None, "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: 2025-10-25, 14:30."
    return {
        "fio": fio,
        "phone": phone,
        "doctor": doctor,
        "date": dt.date().isoformat(),    # YYYY-MM-DD
        "time": dt.strftime("%H:%M"),     # HH:MM
    }, None

# ==== –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Üí –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ ====
async def fallback_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    logging.info("–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", txt)

    data, err = parse_booking(txt)
    if err:
        await update.message.reply_text(
            "–ü—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å üëç\n"
            "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø—Ä–∏—ë–º, –≤–≤–µ–¥–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
            "–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –≤—Ä–∞—á, 2025-10-25, 14:30",
            reply_markup=main_menu_kb()
        )
        return

    # –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: A..H
    appointment_id   = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    patient_full_name= data["fio"]
    patient_phone    = data["phone"]
    doctor_full_name = data["doctor"]
    date_iso         = data["date"]
    time_hm          = data["time"]
    datetime_iso     = f"{date_iso}T{time_hm}:00"
    status           = "–ù–æ–≤–∞—è"

    values = [
        appointment_id,      # A appointment_id
        patient_full_name,   # B patient_full_name
        patient_phone,       # C patient_phone
        doctor_full_name,    # D doctor_full_name
        date_iso,            # E date
        time_hm,             # F time
        datetime_iso,        # G datetime_iso
        status,              # H status
    ]

    try:
        append_booking_row(values)
        await update.message.reply_text(
            "üìù –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –°–ø–∞—Å–∏–±–æ!",
            reply_markup=main_menu_kb()
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É. –ü–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=main_menu_kb()
        )

# ==== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ====
async def _post_init(app: Application):
    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ö–≤–æ—Å—Ç –∞–ø–¥–µ–π—Ç–æ–≤ –ø–µ—Ä–µ–¥ polling
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logging.info("Webhook —É–¥–∞–ª—ë–Ω, pending updates —Å–±—Ä–æ—à–µ–Ω—ã")
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook")

def main():
    if not BOT_TOKEN:
        raise SystemExit("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .post_init(_post_init)
        .build()
    )

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu",  menu))
    app.add_handler(CommandHandler("help",  help_command))

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(on_menu_click))

    # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Üí –∑–∞–ø–∏—Å—å
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_text))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (polling)‚Ä¶")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()

