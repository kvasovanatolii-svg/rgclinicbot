# bot.py ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫ (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º)
# --------------------------------------------------------------
# ‚úî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (STT + TTS —á–µ—Ä–µ–∑ Yandex SpeechKit)
# ‚úî –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (Google Sheets, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∑–∞–ø–∏—Å—å, —Ü–µ–Ω—ã –∏ —Ç.–¥.)
# ‚úî –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –≤—Ö–æ–¥—è—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –∏ —Ñ–æ–ª–±—ç–∫-–æ—Ç–≤–µ—Ç—á–∏–∫
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: python-telegram-bot>=20.8, gspread, google-auth, requests

import os
import re
import json
import time
import logging
import tempfile
import requests
from datetime import datetime
from dateutil.parser import parse as dt_parse

import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import Conflict
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

# --------- ENV ----------
BOT_TOKEN       = os.getenv("TELEGRAM_BOT_TOKEN")
SPREADSHEET_ID  = os.getenv("GOOGLE_SPREADSHEET_ID")
SERVICE_JSON    = os.getenv("GOOGLE_SERVICE_ACCOUNT")
ADMIN_CHAT_ID   = os.getenv("ADMIN_CHAT_ID")

YANDEX_API_KEY   = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

URL_STT = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
URL_TTS = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
HEADERS_SK = {"Authorization": f"Api-Key {YANDEX_API_KEY}"} if YANDEX_API_KEY else {}

SCHEDULE_SHEET  = "Schedule"
REQUESTS_SHEET  = "Requests"
PRICES_SHEET    = "Prices"
PREP_SHEET      = "Prep"
INFO_SHEET      = "Info"
DOCTORS_SHEET   = "Doctors"

logging.basicConfig(format="%(asctime)s [%(levelname)s] %(message)s", level=logging.INFO)

# --------- UI ----------
WELCOME = "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫.
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"
HELP    = ("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:
"
           "/menu ‚Äî –º–µ–Ω—é
"
           "/init_sheets ‚Äî —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç—ã –∏ —à–∞–ø–∫–∏
"
           "/fix_headers ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–ø–∫–∏
"
           "/debug_slots ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–∏–º—ã–µ —Å–ª–æ—Ç—ã
"
           "/doctor <—Ñ–∞–º–∏–ª–∏—è|—Å–ø–µ—Ü> ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—Ä–∞—á–∞
"
           "/hours /manager /promos /services /contacts
")

BTN_RECORD   = "üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º"
BTN_PRICES   = "üßæ –¶–µ–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑—ã"
BTN_PREP     = "‚ÑπÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
BTN_CONTACTS = "üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã"

# ================================================================
# === –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (SpeechKit)
# ================================================================

async def stt_yandex_ogg(ogg_bytes: bytes) -> str:
    if not (YANDEX_API_KEY and YANDEX_FOLDER_ID):
        logging.warning("SpeechKit env vars missing")
        return ""
    params = {"folderId": YANDEX_FOLDER_ID, "lang": "ru-RU", "format": "oggopus", "profanityFilter": "false"}
    try:
        r = requests.post(URL_STT, headers=HEADERS_SK, params=params, data=ogg_bytes, timeout=60)
        r.raise_for_status()
        for line in r.text.splitlines():
            if line.startswith("result="):
                return line.split("=", 1)[1].strip()
        return ""
    except Exception as e:
        logging.exception("STT error: %s", e)
        return ""

async def tts_yandex_ogg(text: str) -> bytes:
    if not (YANDEX_API_KEY and YANDEX_FOLDER_ID):
        return b""
    data = {"text": text, "lang": "ru-RU", "voice": "ermil", "emotion": "neutral", "speed": "1.0",
            "format": "oggopus", "folderId": YANDEX_FOLDER_ID}
    try:
        with requests.post(URL_TTS, headers=HEADERS_SK, data=data, stream=True, timeout=60) as r:
            r.raise_for_status()
            return b"".join(r.iter_content(4096))
    except Exception as e:
        logging.exception("TTS error: %s", e)
        return b""

def route_intent(text: str) -> str:
    t = (text or "").lower()
    if "—Ü–µ–Ω–∞" in t or "—Å—Ç–æ–∏—Ç" in t:
        return "–¶–µ–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑—ã –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –∫–æ–¥—É/–Ω–∞–∑–≤–∞–Ω–∏—é. –ö–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    if "–∑–∞–ø–∏—Å" in t:
        return "–ì–æ—Ç–æ–≤ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø–∏—Å—å. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è."
    if any(k in t for k in ["–≥—Ä–∞—Ñ–∏–∫", "—Ä–µ–∂–∏–º", "—á–∞—Å—ã"]):
        return "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. –£—Ç–æ—á–Ω–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É –∏ –¥–∞—Ç—É."
    return "–Ø –ø–æ–º–æ–≥—É —Å —É—Å–ª—É–≥–∞–º–∏, —Ü–µ–Ω–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å—é. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file = await context.bot.get_file(update.message.voice.file_id)
        ogg_bytes = await file.download_as_bytearray()
        logging.info("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ: %s –±–∞–π—Ç", len(ogg_bytes))
        user_text = await stt_yandex_ogg(bytes(ogg_bytes))
        if not user_text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè")
            return
        reply_text = route_intent(user_text)
        tts_bytes = await tts_yandex_ogg(reply_text)
        if not tts_bytes:
            await update.message.reply_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{user_text}¬ª

{reply_text}")
            return
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tmp:
            tmp.write(tts_bytes); tmp.flush()
            await update.message.reply_voice(voice=open(tmp.name, "rb"),
                                             caption=f"–í—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{user_text}¬ª

{reply_text}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: %s", e)
        await update.message.reply_text("–¢–µ—Ö. –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.")

# ================================================================
# === –ü—Ä–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)
# ================================================================
# ... –∑–¥–µ—Å—å –æ—Å—Ç–∞—é—Ç—Å—è –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ Google Sheets, –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º, —Ä–æ—É—Ç–µ—Ä—ã –∏ —Ç.–¥. ...

# --------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –≤—Å–µ—Ö –∞–ø–¥–µ–π—Ç–æ–≤ ----------
async def _log_all_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        as_json = update.to_dict()
        logging.info("UPDATE: %s", json.dumps(as_json, ensure_ascii=False)[:2000])
    except Exception as e:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å update: %s", e)

# --------- –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ñ–æ–ª–±—ç–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ ----------
async def _fallback_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("–ü—Ä–∏–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôå")

# ================================================================
# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
# ================================================================

async def on_startup(app):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logging.info("Webhook —Å–Ω—è—Ç, –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å webhook: %s", e)


def build_app():
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(on_startup).build()

    # 0) –õ–æ–≥ –≤—Å–µ—Ö –∞–ø–¥–µ–π—Ç–æ–≤ ‚Äî –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–º
    app.add_handler(MessageHandler(filters.ALL, _log_all_updates), group=0)

    # 1) –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –¥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
    app.add_handler(MessageHandler(filters.VOICE, handle_voice), group=1)

    # 2) –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: –∫–æ–º–∞–Ω–¥—ã, FSM, –∫–Ω–æ–ø–∫–∏, –∏ —Ç.–¥.
    # –ü—Ä–∏–º–µ—Ä (–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏):
    # app.add_handler(CommandHandler("start", start))
    # app.add_handler(CommandHandler("menu", menu))
    # app.add_handler(CallbackQueryHandler(menu_click, pattern="^(PRICES|PREP|CONTACTS)$"))
    # app.add_handler(conv)

    # 3) –í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä (FAQ)
    # app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, faq_router), group=2)

    # 99) –§–æ–ª–±—ç–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª—Å—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, _fallback_text), group=99)

    return app


def main():
    if not BOT_TOKEN:
        raise SystemExit("‚ùó TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (polling)‚Ä¶")
    app = build_app()
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
