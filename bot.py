# -*- coding: utf-8 -*-
"""
bot.py ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫
–í–∞—Ä–∏–∞–Ω—Ç: –æ–¥–∏–Ω —Ñ–∞–π–ª, polling, –≥–æ–ª–æ—Å (SpeechKit), –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.
–í–∞–∂–Ω–æ: —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –º–µ–¥.–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –Ω–µ –¥–∞—ë–º.
"""

import os
import json
import logging
import tempfile
from datetime import datetime

import requests
import gspread
from google.oauth2.service_account import Credentials

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ---------------------------------------------------------------------
# ENV
# ---------------------------------------------------------------------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# Google Sheets
SPREADSHEET_ID = os.getenv("GOOGLE_SPREADSHEET_ID")
SERVICE_JSON = os.getenv("GOOGLE_SERVICE_ACCOUNT")

# Admin
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# Yandex SpeechKit (API Key)
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
URL_STT = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
URL_TTS = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"

# ---------------------------------------------------------------------
# LOGGING
# ---------------------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)
log = logging.getLogger("rgclinicbot")

# ---------------------------------------------------------------------
# CONST / UI
# ---------------------------------------------------------------------
WELCOME = (
    "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫.\n"
    "–ü–æ–º–æ–≥–∞—é —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤, –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É, —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø–∏—Å—å.\n"
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≥–æ–ª–æ—Å ‚Äî –ø–æ–¥—Å–∫–∞–∂—É üòä"
)

BTN_RECORD = "üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º"
BTN_PRICES = "üßæ –¶–µ–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑—ã"
BTN_PREP = "‚ÑπÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
BTN_CONTACTS = "üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã"


def main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(BTN_RECORD, callback_data="RECORD")],
            [InlineKeyboardButton(BTN_PRICES, callback_data="PRICES")],
            [InlineKeyboardButton(BTN_PREP, callback_data="PREP")],
            [InlineKeyboardButton(BTN_CONTACTS, callback_data="CONTACTS")],
        ]
    )


# ---------------------------------------------------------------------
# Google Sheets helpers (–º–∏–Ω–∏–º—É–º, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –∫–æ–¥)
# ---------------------------------------------------------------------
def gs_client():
    if not SERVICE_JSON or not SPREADSHEET_ID:
        return None
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = Credentials.from_service_account_info(json.loads(SERVICE_JSON), scopes=scopes)
    return gspread.authorize(creds)


def info_get(key: str, default: str = "") -> str:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–ø—Ä–∞–≤–∫–∞ –∏–∑ –ª–∏—Å—Ç–∞ Info (–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å)."""
    try:
        gc = gs_client()
        if not gc:
            return default
        sh = gc.open_by_key(SPREADSHEET_ID)
        ws = sh.worksheet("Info")
        rows = ws.get_all_records()
        for r in rows:
            if str(r.get("key", "")).strip().lower() == key.lower():
                return str(r.get("value", "")).strip()
    except Exception as e:
        log.warning("Info sheet read error: %s", e)
    return default


# ---------------------------------------------------------------------
# SpeechKit helpers
# ---------------------------------------------------------------------
async def stt_yandex_ogg(ogg_bytes: bytes) -> str:
    if not (YANDEX_API_KEY and YANDEX_FOLDER_ID):
        log.warning("SpeechKit env not set")
        return ""
    params = {
        "folderId": YANDEX_FOLDER_ID,
        "lang": "ru-RU",
        "format": "oggopus",
        "profanityFilter": "false",
    }
    headers = {"Authorization": f"Api-Key {YANDEX_API_KEY}"}
    try:
        r = requests.post(
            URL_STT,
            headers=headers,
            params=params,
            data=ogg_bytes,
            timeout=60,
        )
        r.raise_for_status()
        for line in r.text.splitlines():
            if line.startswith("result="):
                return line.split("=", 1)[1].strip()
        return ""
    except Exception as e:
        log.exception("STT error: %s", e)
        return ""


async def tts_yandex_ogg(text: str) -> bytes:
    if not (YANDEX_API_KEY and YANDEX_FOLDER_ID):
        return b""
    data = {
        "text": text,
        "lang": "ru-RU",
        "voice": "ermil",
        "emotion": "neutral",
        "speed": "1.0",
        "format": "oggopus",
        "folderId": YANDEX_FOLDER_ID,
    }
    headers = {"Authorization": f"Api-Key {YANDEX_API_KEY}"}
    try:
        with requests.post(
            URL_TTS,
            headers=headers,
            data=data,
            stream=True,
            timeout=60,
        ) as r:
            r.raise_for_status()
            return b"".join(r.iter_content(4096))
    except Exception as e:
        log.exception("TTS error: %s", e)
        return b""


def route_intent(text: str) -> str:
    t = (text or "").lower()
    if "—Ü–µ–Ω–∞" in t or "—Å—Ç–æ–∏—Ç" in t or "–ø—Ä–∞–π—Å" in t:
        return "–°–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Å–ø—Ä–∞–≤–æ—á–Ω–æ)."
    if "–∑–∞–ø–∏—Å" in t:
        return "–ú–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è."
    if "—Ä–µ–∂–∏–º" in t or "–≥—Ä–∞—Ñ–∏–∫" in t or "—á–∞—Å—ã" in t:
        hours = info_get("clinic_hours", "–ø–Ω‚Äì–ø—Ç 08:00‚Äì20:00, —Å–±‚Äì–≤—Å 09:00‚Äì18:00")
        return f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (—Å–ø—Ä–∞–≤–æ—á–Ω–æ): {hours}. –£—Ç–æ—á–Ω–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ."
    if "–ø–æ–¥–≥–æ—Ç–æ–≤" in t or "–Ω–∞—Ç–æ—â–∞–∫" in t:
        return "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –¥–∞–º –æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ (—Å–ø—Ä–∞–≤–æ—á–Ω–æ)."
    return "–Ø –ø–æ–º–æ–≥—É —Å —É—Å–ª—É–≥–∞–º–∏, —Ü–µ–Ω–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å—é. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏."


# ---------------------------------------------------------------------
# Handlers
# ---------------------------------------------------------------------
async def on_startup(app):
    # —Å–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã polling –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        log.info("Webhook —Å–Ω—è—Ç, –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å webhook: %s", e)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME, reply_markup=main_menu())


async def menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "PRICES":
        await q.message.reply_text("üßæ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∫–æ–¥ ‚Äî –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ (—Å–ø—Ä–∞–≤–æ—á–Ω–æ).")
    elif q.data == "PREP":
        await q.message.reply_text("‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø—Ä–∏—à–ª—é –ø–∞–º—è—Ç–∫—É –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ (—Å–ø—Ä–∞–≤–æ—á–Ω–æ).")
    elif q.data == "CONTACTS":
        hours = info_get("clinic_hours", "–ø–Ω‚Äì–ø—Ç 08:00‚Äì20:00, —Å–±‚Äì–≤—Å 09:00‚Äì18:00")
        addr = info_get("clinic_address", "–ê–¥—Ä–µ—Å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è")
        phone = info_get("clinic_phone", "+7 (000) 000-00-00")
        await q.message.reply_text(
            f"üìç –†–ì –ö–ª–∏–Ω–∏–∫\n–ê–¥—Ä–µ—Å: {addr}\n–¢–µ–ª.: {phone}\n–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {hours}",
            reply_markup=main_menu(),
        )
    elif q.data == "RECORD":
        await q.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ, –∫ –∫–∞–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏ –¥–∞—Ç—É ‚Äî –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω—É.")
    else:
        await q.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá", reply_markup=main_menu())


async def fallback_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = (update.message.text or "").strip()
    reply = route_intent(user_text)
    await update.message.reply_text(reply, reply_markup=main_menu())


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file = await context.bot.get_file(update.message.voice.file_id)
        ogg_bytes = await file.download_as_bytearray()
        log.info("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ: %s –±–∞–π—Ç", len(ogg_bytes))

        user_text = await stt_yandex_ogg(bytes(ogg_bytes))
        if not user_text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè")
            return

        reply_text = route_intent(user_text)
        tts_bytes = await tts_yandex_ogg(reply_text)

        if not tts_bytes:
            text_out = "–í—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{}¬ª\n\n{}".format(user_text, reply_text)
            await update.message.reply_text(text_out)
            return

        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tmp:
            tmp.write(tts_bytes)
            tmp.flush()
            caption_out = "–í—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{}¬ª\n\n{}".format(user_text, reply_text)
            await update.message.reply_voice(
                voice=open(tmp.name, "rb"),
                caption=caption_out,
            )

    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: %s", e)
        await update.message.reply_text("–¢–µ—Ö. –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.")


async def log_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = update.to_dict()
        log.info("UPDATE: %s", json.dumps(data, ensure_ascii=False)[:2000])
    except Exception:
        pass


# ---------------------------------------------------------------------
# Build app
# ---------------------------------------------------------------------
def build_app():
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .post_init(on_startup)
        .build()
    )

    # 0. –ª–æ–≥ –≤—Å–µ—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    app.add_handler(MessageHandler(filters.ALL, log_all), group=0)

    # 1. –≥–æ–ª–æ—Å
    app.add_handler(MessageHandler(filters.VOICE, handle_voice), group=1)

    # 2. –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(menu_click))

    # 3. —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_text), group=5)

    return app


def main():
    if not BOT_TOKEN:
        raise SystemExit("‚ùó TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    app = build_app()
    log.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (polling)‚Ä¶")
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
