# bot.py ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫ (inline-–º–µ–Ω—é)
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: python-telegram-bot==20.8

import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

logging.basicConfig(
    format="%(asctime)s %(levelname)s %(message)s",
    level=logging.INFO,
)

# --- –¢–µ–∫—Å—Ç—ã ---
WELCOME_TEXT = (
    "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
    "–Ø ‚Äî –ú–µ–¥–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –†–ì –ö–ª–∏–Ω–∏–∫, –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"
)

HELP_TEXT = (
    "‚ÑπÔ∏è –Ø –ø–æ–º–æ–≥—É:\n"
    "‚Ä¢ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤\n"
    "‚Ä¢ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É\n"
    "‚Ä¢ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º\n"
    "‚Ä¢ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–Ω–∏–∫\n\n"
    "–ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /menu."
)

# --- –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ---
BTN_PRICES   = "üßæ –¶–µ–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑—ã"
BTN_RECORD   = "üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º"
BTN_CONTACTS = "üìç –ö–æ–Ω—Ç–∞–∫—Ç—ã"
BTN_PREP     = "‚ÑπÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"

CB_PRICES   = "MENU_PRICES"
CB_RECORD   = "MENU_RECORD"
CB_CONTACTS = "MENU_CONTACTS"
CB_PREP     = "MENU_PREP"

def main_menu_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(BTN_PRICES, callback_data=CB_PRICES)],
        [InlineKeyboardButton(BTN_RECORD, callback_data=CB_RECORD)],
        [InlineKeyboardButton(BTN_PREP, callback_data=CB_PREP)],
        [InlineKeyboardButton(BTN_CONTACTS, callback_data=CB_CONTACTS)],
    ]
    return InlineKeyboardMarkup(rows)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_TEXT, reply_markup=main_menu_kb())

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
async def on_menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()  # –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è UX)

    if data == CB_PRICES:
        text = (
            "üßæ *–¶–µ–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑—ã*\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ *–∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞* ‚Äî –ø–æ–¥—Å–∫–∞–∂—É —Ü–µ–Ω—É –∏ —Å—Ä–æ–∫–∏.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: `–ì–ª—é–∫–æ–∑–∞`, `–û–ê–ö`, `11-10-001`"
        )
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=main_menu_kb())

    elif data == CB_RECORD:
        text = (
            "üìÖ *–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º*\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
            "*–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω, –≤—Ä–∞—á/—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î), –≤—Ä–µ–º—è (–ß–ß:–ú–ú)*\n"
            "_–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò., +7..., –¢–µ—Ä–∞–ø–µ–≤—Ç, 2025-10-25, 14:30_"
        )
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=main_menu_kb())

    elif data == CB_PREP:
        text = (
            "‚ÑπÔ∏è *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º*\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞/–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—é –ø–∞–º—è—Ç–∫—É –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ."
        )
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=main_menu_kb())

    elif data == CB_CONTACTS:
        text = (
            "üìç *–ö–æ–Ω—Ç–∞–∫—Ç—ã –†–ì –ö–ª–∏–Ω–∏–∫*\n"
            "–ê–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1\n"
            "–¢–µ–ª.: +7 (000) 000-00-00\n"
            "–†–µ–∂–∏–º: –ø–Ω‚Äì–ø—Ç 08:00‚Äì20:00, —Å–±‚Äì–≤—Å 09:00‚Äì18:00"
        )
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=main_menu_kb())

# --- –§–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞) ---
async def fallback_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    logging.info("–ó–∞–ø—Ä–æ—Å: %s", txt)
    await update.message.reply_text(
        "–ü—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å üëç –°–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á—É –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–∞–π—Å—É –∏ –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.",
        reply_markup=main_menu_kb()
    )

def main():
    if not BOT_TOKEN:
        raise SystemExit("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("help", help_command))

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(on_menu_click))

    # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_text))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (polling)‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()


